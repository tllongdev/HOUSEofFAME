{"version":3,"sources":["HouseOfFameLogoWHT.svg","components/Navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Navbar","useState","menuActive","setMenuState","className","src","logo","alt","onMouseLeave","onClick","href","App","id","data-relative-input","data-depth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,gD,wLCI5B,SAASC,IAAU,IAAD,EACGC,oBAAS,GADZ,mBACzBC,EADyB,KACbC,EADa,KAEhC,OACC,yBAAKC,UAAU,UACd,gCACC,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,wBACCH,UAAS,UAAKF,EAAa,aAAe,IAC1CM,aAAc,kBAAML,GAAa,IACjCM,QAAS,kBAAMN,GAAa,KAE5B,4BACC,uBAAGO,KAAK,KAAR,SAED,4BACC,uBAAGA,KAAK,KAAR,UAED,4BACC,uBAAGA,KAAK,KAAR,UAED,4BACC,uBAAGA,KAAK,KAAR,aAGF,yBAAKN,UAAU,YAAYK,QAAS,kBAAMN,GAAcD,KACvD,yBAAKE,UAAU,WACf,yBAAKA,UAAU,WACf,yBAAKA,UAAU,iBCCLO,MAvBf,WAMC,OACC,oCACC,kBAACX,EAAD,MACA,yBAAKI,UAAU,MAAMQ,GAAG,SACvB,4BACCC,sBAAoB,OACpBC,aAAW,MACXV,UAAU,aACVQ,GAAG,aAEH,yBAAKP,IAAKC,IAAMF,UAAU,iBAAiBG,IAAI,aCbhCQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f61118e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/HouseOfFameLogoWHT.1d683cdc.svg\";","import React, { useState } from 'react'\nimport logo from '../HouseOfFameLogoWHT.svg'\nimport '../App.css'\n\nexport default function Navbar() {\n\tconst [menuActive, setMenuState] = useState(false)\n\treturn (\n\t\t<nav className='navbar'>\n\t\t\t<header>\n\t\t\t\t<img src={logo} className='Nav-logo' alt='logo' />\n\t\t\t\t<ul\n\t\t\t\t\tclassName={`${menuActive ? 'nav-active' : ''}`}\n\t\t\t\t\tonMouseLeave={() => setMenuState(false)}\n\t\t\t\t\tonClick={() => setMenuState(false)}\n\t\t\t\t>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<a href='#'>HOME</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<a href='#'>ABOUT</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<a href='#'>MEDIA</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<a href='#'>CONTACT</a>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t\t<div className='mcdondals' onClick={() => setMenuState(!menuActive)}>\n\t\t\t\t\t<div className='buntop'></div>\n\t\t\t\t\t<div className='burger'></div>\n\t\t\t\t\t<div className='bunbottom'></div>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t</nav>\n\t)\n}\n","import React from 'react'\nimport ReactDom from 'react-dom'\nimport { useSpring, animated } from 'react-spring'\nimport Navbar from './components/Navbar'\nimport logo from './HouseOfFameLogoWHT.svg'\nimport './App.css'\n\n// import Parallax from 'parallax-js'\n\nfunction App() {\n\t// const scene = document.getElementById('scene')\n\t// const parallaxInstance = new Parallax(scene, {\n\t// \trelativeInput: true,\n\t// })\n\t// parallaxInstance.friction(0.2, 0.2)\n\treturn (\n\t\t<>\n\t\t\t<Navbar />\n\t\t\t<div className='App' id='scene'>\n\t\t\t\t<header\n\t\t\t\t\tdata-relative-input='true'\n\t\t\t\t\tdata-depth='0.2'\n\t\t\t\t\tclassName='App-header'\n\t\t\t\t\tid='container'\n\t\t\t\t>\n\t\t\t\t\t<img src={logo} className='App-logo slide' alt='logo' />\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}